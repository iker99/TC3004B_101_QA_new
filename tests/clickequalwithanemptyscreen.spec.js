// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')
const fs = require('fs')

describe('Click equal with an empty screen', function() {
  this.timeout(30000)
  let driver
  let vars
  if (!fs.existsSync('screenshots')) {
    fs.mkdirSync('screenshots')
  }
  beforeEach(async function() {
    const chrome = require('selenium-webdriver/chrome');
    const options = new chrome.Options();
    options.addArguments("--headless", "--no-sandbox", "--disable-dev-shm-usage");
    driver = await new Builder().forBrowser('chrome').setChromeOptions(options).build();
    vars = {};
  })
      
  afterEach(async function() {
    if (driver){
      //Taked a screenshot of the result page
      const filename = this.currentTest.fullTitle()
        .replace(/[""]+/g, '')
        .replace(/[^a-z0-9]/gi, '_')
        .toLowerCase();;
      const endcodedString = await driver.takeScreenshot();
      await fs.writeFileSync(`screenshots/${filename}.png`, endcodedString, 'base64');
      await driver.quit();
    }
  })
  it('Click equal with an empty screen', async function() {
    await driver.get("http://localhost:8000/")
    await driver.manage().window().setRect(1051, 797)
    await driver.findElement(By.linkText("src/")).click()
    await driver.findElement(By.css("body")).click()
    await driver.findElement(By.css("button:nth-child(2)")).click()
  })
  
})
